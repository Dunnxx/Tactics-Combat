using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TacticsMove : MonoBehaviour {

    public bool turn = false;

    List<Tile> selectabelTiles = new List<Tile>();
    GameObject[] tiles;

    Stack<Tile> path = new Stack<Tile>();
    Tile currentTile;

    public bool moving = false;
    public int agility; // amount of tiles can move 
    public float jumpHeight;
    public float moveSpeed; // changes depending on agility
    public float jumpVelocity; // needs to be 4.5f
    public float health;
    // public float armor;
    //public int level;
    //public float damage;
    public bool action = false;
    public bool hasMoved = false;

    Vector3 velocity = new Vector3();
    Vector3 heading = new Vector3();

    float halfHeight = 0;

    bool fallingDown = false;
    bool jumpingUp = false;
    bool movingEdge = false;
    Vector3 jumpTarget;

    public Tile actualTargetTile;

    protected void Init()
    {
        
        tiles = GameObject.FindGameObjectsWithTag("Tile");

        halfHeight = GetComponent<Collider>().bounds.extents.y;

        TurnManager.AddUnit(this);
    }

    protected void calculateStats()
    {
            //todo after everything else is made calculates units stats

    }

    public void GetCurrentTile()
    {
        currentTile = GetTargetTile(gameObject);
        currentTile.current = true;
    }

    public Tile GetTargetTile(GameObject target)
    {
        RaycastHit hit;

        Tile tile = null;

        if(Physics.Raycast(target.transform.position, -Vector3.up, out hit, 1))
        {
            tile = hit.collider.GetComponent<Tile>();
        }
        return tile;
    }

    public void ComputeAdjacencyList(float jumpHeight, Tile target)
    {
        // for maps that move and change
        

        foreach (GameObject tile in tiles)
        {
            Tile t = tile.GetComponent<Tile>();
            t.FindNeighbours(jumpHeight, target);
        }
    }
    //highlighting tiles gotta steal for range 

    public void FindSelectableTiles()
    {
        ComputeAdjacencyList(jumpHeight, null);
        GetCurrentTile();
        

        Queue<Tile> process = new Queue<Tile>();

        process.Enqueue(currentTile);
        currentTile.visted = true;


        while(process.Count > 0)
        {
            Tile t = process.Dequeue();
            selectabelTiles.Add(t);
            t.selectable = true;

            if (t.distance < agility)
            {



                foreach (Tile tile in t.adjacenctList)
                {
                    if (!tile.visted)
                    {
                        tile.parent = t;
                        tile.visted = true;
                        tile.distance = 1 + t.distance;
                        process.Enqueue(tile);
                    }
                }
            }
        }

    }


    public void FindAttackTiles()
    {
        ComputeAdjacencyList(jumpHeight, null);
        GetCurrentTile();

        Queue<Tile> process = new Queue<Tile>();

        process.Enqueue(currentTile);
        currentTile.visted = true;
        


        while (process.Count > 0)
        {
            Tile t = process.Dequeue();
            selectabelTiles.Add(t);
            t.selectable = true;

            if (t.distance < 1)
            {



                foreach (Tile tile in t.adjacenctList)
                {
                    if (!tile.visted)
                    {
                        tile.parent = t;
                        tile.visted = true;
                        tile.distance = 1 + t.distance;
                        process.Enqueue(tile);
                    }
                }
            }
        }

    }




    public void MoveToTile(Tile tile)
    {
        path.Clear();
        tile.target = true;
        moving = true;

        Tile next = tile;
        while(next != null)
        {
            path.Push(next);
            next = next.parent;
        }
    }

    public void endTurn()
    {
        if (action)
        {
            action = false;
            hasMoved = false;
            TurnManager.EndTurn();
            
        }
    }

    public void Move()
    {
        if(path.Count > 0)
        {
            Tile t = path.Peek();
            Vector3 target = t.transform.position;


            //calculate units postion on top of tile 
            target.y += halfHeight + t.GetComponent<Collider>().bounds.extents.y;

            if(Vector3.Distance(transform.position, target) >= 0.1f)
            {

                bool jump = transform.position.y != target.y;
                if (jump)
                {
                    Jump(target);
                }
                else
                {
                    CalculateHeading(target);
                    SetHorizotalVelocity();
                }

                //locomotion add animation here

                transform.forward = heading;
                transform.position += velocity * Time.deltaTime;
            }
            else
            {
                //tile reached
                transform.position = target;
                path.Pop();
            }
    

        }
        else
        {
            RemoveSelectableTiles();
            moving = false;


        }
    }

    protected  void RemoveSelectableTiles()
    {
        if (currentTile != null)
        {
            currentTile.current = false;
            currentTile = null;
        }

        foreach(Tile tile in selectabelTiles)
        {
            tile.Reset();

        }

        selectabelTiles.Clear();
    }



    void CalculateHeading(Vector3 target)
    {
        heading = target - transform.position;
        heading.Normalize();
    }



    void SetHorizotalVelocity()
    {
        velocity = heading * moveSpeed;
    }


    void Jump(Vector3 target)
    {
        if (fallingDown)
        {
            FallDownward(target);
        }
        else if (jumpingUp)
        {
            JumpUpward(target);
        }
        else if (movingEdge)
        {
            MoveToEdge();
        }
        else
        {
            PrepareJump(target);
        }
    }


    void PrepareJump(Vector3 target)
    {
        float targetY = target.y;

        target.y = transform.position.y;

        CalculateHeading(target);
       
        if(transform.position.y > targetY)
        {
            fallingDown = false;
            jumpingUp = false;
            movingEdge = true;

            jumpTarget = transform.position + (target - transform.position) / 2.0f;

        }
        else
        {
            fallingDown = false;
            jumpingUp = true;
            movingEdge = false;

            velocity = heading * moveSpeed / 3.0f;

            float difference = targetY - transform.position.y;

            velocity.y = jumpVelocity * (0.5f + difference / 2.0f);
        }
    }


    void FallDownward(Vector3 target)
    {
        velocity += Physics.gravity * Time.deltaTime;

        if(transform.position.y <= target.y)
        {
            fallingDown = false;

            Vector3 p = transform.position;
            p.y = target.y;
            transform.position = p;

            velocity = new Vector3();
        }
    }
    void JumpUpward(Vector3 target)
    {
        velocity += Physics.gravity * Time.deltaTime;
        
        if(transform.position.y > target.y)
        {
            jumpingUp = false;
            fallingDown = true;
        }
    }


    void MoveToEdge()
    {
        if(Vector3.Distance(transform.position, jumpTarget)>= 0.05f)
        {
            SetHorizotalVelocity();
        }
        else
        {
            movingEdge = false;
            fallingDown = true;

            velocity /= 5.0f;
            velocity.y = 1.5f;
        }
    }


    protected Tile FindLowestF(List<Tile> list)
    {
        Tile lowest = list[0];

        foreach (Tile t in list)
        {
            if (t.f < lowest.f)
            {
                lowest = t;
            }
        }

        list.Remove(lowest);

        return lowest;
    }


    //A*

    protected Tile FindeEndTile(Tile t)
    {
        Stack<Tile> tempPath = new Stack<Tile>();

        Tile next = t.parent;
        while(next != null)
        {
            tempPath.Push(next);
            next = next.parent;
        }
        if(tempPath.Count <= agility)
        {
            return t.parent;
        }
        Tile endTile = null;
        for(int i = 0; i <= agility; i++)
        {
            endTile = tempPath.Pop();
        }
        return endTile;

    }


    protected void FindPath(Tile target)
    {
        ComputeAdjacencyList(jumpHeight, target);
        GetCurrentTile();

        List<Tile> openList = new List<Tile>();
        List<Tile> closedList = new List<Tile>();

        openList.Add(currentTile);
        //currentTile.parent = ?
        currentTile.h = Vector3.Distance(currentTile.transform.position, target.transform.position);
        currentTile.f = currentTile.h;
        
        while(openList.Count > 0)
        {

            Tile t = FindLowestF(openList);

            closedList.Add(t);

            if (t == target)
            {
                actualTargetTile = FindeEndTile(t);
                MoveToTile(actualTargetTile);
                return;
            }


            //3 steps of A*
            foreach(Tile tile in t.adjacenctList)
            {
                if (closedList.Contains(tile))
                {
                    //do nothing alread processed
                }
                else if (openList.Contains(tile))
                {
                    float tempG = t.g + Vector3.Distance(tile.transform.position, t.transform.position);
                    
                    if(tempG < tile.g)
                    {
                        tile.parent = t;
                        tile.g = tempG;
                        tile.f = tile.g + tile.h;
                    }


                }
                else
                {
                    tile.parent = t;

                    tile.g = t.g + Vector3.Distance(tile.transform.position, t.transform.position);
                    tile.h = Vector3.Distance(tile.transform.position, target.transform.position);
                    tile.f = tile.g + tile.h;

                    openList.Add(tile);
                }
                


            }

        }

        //todo what do you do if there is no path to the target tile
        Debug.Log("path not found");


    }

    public void BeginTurn()
    {
        turn = true;
    }


    public void EndTurn()
    {
        turn = false;
    }
}
